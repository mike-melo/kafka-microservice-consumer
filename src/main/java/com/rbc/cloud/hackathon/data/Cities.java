/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.rbc.cloud.hackathon.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Cities extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6239342049963242796L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cities\",\"namespace\":\"com.rbc.cloud.hackathon.data\",\"fields\":[{\"name\":\"CityId\",\"type\":\"string\"},{\"name\":\"CityName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Cities> ENCODER =
      new BinaryMessageEncoder<Cities>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Cities> DECODER =
      new BinaryMessageDecoder<Cities>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Cities> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Cities> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Cities>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Cities to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Cities from a ByteBuffer. */
  public static Cities fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence CityId;
  @Deprecated public java.lang.CharSequence CityName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cities() {}

  /**
   * All-args constructor.
   * @param CityId The new value for CityId
   * @param CityName The new value for CityName
   */
  public Cities(java.lang.CharSequence CityId, java.lang.CharSequence CityName) {
    this.CityId = CityId;
    this.CityName = CityName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CityId;
    case 1: return CityName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CityId = (java.lang.CharSequence)value$; break;
    case 1: CityName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CityId' field.
   * @return The value of the 'CityId' field.
   */
  public java.lang.CharSequence getCityId() {
    return CityId;
  }

  /**
   * Sets the value of the 'CityId' field.
   * @param value the value to set.
   */
  public void setCityId(java.lang.CharSequence value) {
    this.CityId = value;
  }

  /**
   * Gets the value of the 'CityName' field.
   * @return The value of the 'CityName' field.
   */
  public java.lang.CharSequence getCityName() {
    return CityName;
  }

  /**
   * Sets the value of the 'CityName' field.
   * @param value the value to set.
   */
  public void setCityName(java.lang.CharSequence value) {
    this.CityName = value;
  }

  /**
   * Creates a new Cities RecordBuilder.
   * @return A new Cities RecordBuilder
   */
  public static com.rbc.cloud.hackathon.data.Cities.Builder newBuilder() {
    return new com.rbc.cloud.hackathon.data.Cities.Builder();
  }

  /**
   * Creates a new Cities RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cities RecordBuilder
   */
  public static com.rbc.cloud.hackathon.data.Cities.Builder newBuilder(com.rbc.cloud.hackathon.data.Cities.Builder other) {
    return new com.rbc.cloud.hackathon.data.Cities.Builder(other);
  }

  /**
   * Creates a new Cities RecordBuilder by copying an existing Cities instance.
   * @param other The existing instance to copy.
   * @return A new Cities RecordBuilder
   */
  public static com.rbc.cloud.hackathon.data.Cities.Builder newBuilder(com.rbc.cloud.hackathon.data.Cities other) {
    return new com.rbc.cloud.hackathon.data.Cities.Builder(other);
  }

  /**
   * RecordBuilder for Cities instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cities>
    implements org.apache.avro.data.RecordBuilder<Cities> {

    private java.lang.CharSequence CityId;
    private java.lang.CharSequence CityName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.rbc.cloud.hackathon.data.Cities.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CityId)) {
        this.CityId = data().deepCopy(fields()[0].schema(), other.CityId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CityName)) {
        this.CityName = data().deepCopy(fields()[1].schema(), other.CityName);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Cities instance
     * @param other The existing instance to copy.
     */
    private Builder(com.rbc.cloud.hackathon.data.Cities other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CityId)) {
        this.CityId = data().deepCopy(fields()[0].schema(), other.CityId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CityName)) {
        this.CityName = data().deepCopy(fields()[1].schema(), other.CityName);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'CityId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCityId() {
      return CityId;
    }

    /**
      * Sets the value of the 'CityId' field.
      * @param value The value of 'CityId'.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.Cities.Builder setCityId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.CityId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CityId' field has been set.
      * @return True if the 'CityId' field has been set, false otherwise.
      */
    public boolean hasCityId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CityId' field.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.Cities.Builder clearCityId() {
      CityId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CityName' field.
      * @return The value.
      */
    public java.lang.CharSequence getCityName() {
      return CityName;
    }

    /**
      * Sets the value of the 'CityName' field.
      * @param value The value of 'CityName'.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.Cities.Builder setCityName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.CityName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CityName' field has been set.
      * @return True if the 'CityName' field has been set, false otherwise.
      */
    public boolean hasCityName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CityName' field.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.Cities.Builder clearCityName() {
      CityName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Cities build() {
      try {
        Cities record = new Cities();
        record.CityId = fieldSetFlags()[0] ? this.CityId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.CityName = fieldSetFlags()[1] ? this.CityName : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Cities>
    WRITER$ = (org.apache.avro.io.DatumWriter<Cities>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Cities>
    READER$ = (org.apache.avro.io.DatumReader<Cities>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
